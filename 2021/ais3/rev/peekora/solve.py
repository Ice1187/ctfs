import pickletools as pt

'''
f = open('flag_checker.pkl', 'rb')
pt.dis(f)
'''

# ref: https://intoli.com/blog/dangerous-pickles/
# ref: https://github.com/python/cpython/blob/3.6/Lib/pickletools.py#L1939

mem = {} 
stack = []

def tup():
    last_mark_index = len(stack) - 1 - stack[::-1].index('MARK')
    mark_tuple = tuple(stack[last_mark_index + 1:])
    return  stack[:last_mark_index] + [mark_tuple]

def lis():
    last_mark_index = len(stack) - 1 - stack[::-1].index('MARK')
    mark_tuple = list(stack[last_mark_index + 1:])
    return stack[:last_mark_index] + [mark_tuple]

def red(stack):
    args = stack.pop()
    call = stack.pop()
    stack.append(call(*args))
    return stack

def put(idx):
    mem[idx] = stack[-1]

def pop():
    stack.pop()

def get(idx):
    stack.append(mem[idx])

def mark():
        stack.append('MARK')

def pp():
    print('Stack:\n', stack)
    print('Memory:\n', mem)


stack.append(input)
stack.append('MARK')
stack.append('FLAG: ')
# 30 TUPLE: stack = [input, ('FLAG: ')]
stack = tup() 

# 31 REDUCE: stack = [input(*('FLAG: '))] 
stack = red(stack)

put(0)
stack.pop()
stack.append(getattr)
put(1)
stack.pop()
stack.append(mem[1])
stack.append('MARK')
stack.append('MARK')
stack.append(exit)   # is exit working as a function?
stack.append(str)
# 101 LIST: 
stack = lis()
stack.append('__getitem__')
stack = tup()
stack = red(stack)
put(2)
pop()
get(2)
mark()
get(1)
mark()
get(0)
stack.append('startswith')
stack = tup()
stack = red(stack)
mark()
stack.append('AIS3{')
stack = tup()
stack = red(stack)
stack = tup()
stack = red(stack)
mark()
stack = tup()
stack = red(stack)
get(2)
mark()
get(1)
mark()
get(0)
stack.append('endswith')
stack = tup()
stack = red(stack)
mark()
stack.append('}')
stack = tup()
stack = red(stack)
stack = tup()
stack = red(stack)
mark()
stack = tup()
stack = red(stack)
# flag[6] == 'A'
get(2)
mark()
get(1)
mark()
get(1)
mark()
get(0)
stack.append('__getitem__')
stack = tup()
stack = red(stack)
mark()
stack.append(6)
stack = tup()
stack = red(stack)
stack.append('__eq__')
stack = tup()
stack = red(stack)
mark()
stack.append('A')
stack = tup()
stack = red(stack)
stack = tup()
stack = red(stack)
mark()
stack = tup()
stack = red(stack)
# flag[9] == 'j'
get(2)
mark()
get(1)
mark()
get(1)
mark()
get(0)
stack.append('__getitem__')
stack = tup()
stack = red(stack)
mark()
stack.append(9)
stack = tup()
stack = red(stack)
stack.append('__eq__')
stack = tup()
stack = red(stack)
mark()
stack.append('j')
stack = tup()
stack = red(stack)
stack = tup()
stack = red(stack)
mark()
stack = tup()
stack = red(stack)
# put flag[9] onto mem[3]
get(1)
mark()
get(0)
stack.append('__getitem__')
stack = tup()
stack = red(stack)
mark()
stack.append(9)
stack = tup()
stack = red(stack)
put(3)
pop()
# flag[11] == 'p'
get(2)
mark()
get(1)
mark()
get(1)
mark()
get(0)
stack.append('__getitem__')
stack = tup()
stack = red(stack)
mark()
stack.append(11)
stack = tup()
stack = red(stack)
stack.append('__eq__')
stack = tup()
stack = red(stack)
mark()
stack.append('p')
stack = tup()
stack = red(stack)
stack = tup()
stack = red(stack)
mark()
stack = tup()
stack = red(stack)
# flag[14] == mem[3] == flag[9] 
get(2)
mark()
get(1)
mark()
get(1)
mark()
get(0)
stack.append('__getitem__')
stack = tup()
stack = red(stack)
mark()
stack.append(14)
stack = tup()
stack = red(stack)
stack.append('__eq__')
stack = tup()
stack = red(stack)
mark()
get(3)
stack = tup()
stack = red(stack)
stack = tup()
stack = red(stack)
mark()
stack = tup()
stack = red(stack)
# put flag[1] onto mem[4]
get(1)
mark()
get(0)
stack.append('__getitem__')
stack = tup()
stack = red(stack)
mark()
stack.append(1)
stack = tup()
stack = red(stack)
put(4)
pop()
# flag[5] == 'd'
get(2)
mark()
get(1)
mark()
get(1)
mark()
get(0)
stack.append('__getitem__')
stack = tup()
stack = red(stack)
mark()
stack.append(5)
stack = tup()
stack = red(stack)
stack.append('__eq__')
stack = tup()
stack = red(stack)
mark()
stack.append('d')
stack = tup()
stack = red(stack)
stack = tup()
stack = red(stack)
mark()
stack = tup()
stack = red(stack)
# flag[10] == 'z'
get(2)
mark()
get(1)
mark()
get(1)
mark()
get(0)
stack.append('__getitem__')
stack = tup()
stack = red(stack)
mark()
stack.append(10)
stack = tup()
stack = red(stack)
stack.append('__eq__')
stack = tup()
stack = red(stack)
mark()
stack.append('z')
stack = tup()
stack = red(stack)
stack = tup()
stack = red(stack)
mark()
stack = tup()
stack = red(stack)
# flag[12] == 'h'
get(2)
mark()
get(1)
mark()
get(1)
mark()
get(0)
stack.append('__getitem__')
stack = tup()
stack = red(stack)
mark()
stack.append(12)
stack = tup()
stack = red(stack)
stack.append('__eq__')
stack = tup()
stack = red(stack)
mark()
stack.append('h')
stack = tup()
stack = red(stack)
stack = tup()
stack = red(stack)
mark()
stack = tup()
stack = red(stack)
# flag[13] == mem[4] == flag[1] 
get(2)
mark()
get(1)
mark()
get(4)
stack.append('__eq__')
stack = tup()
stack = red(stack)
mark()
get(1)
mark()
get(0)
stack.append('__getitem__')
stack = tup()
stack = red(stack)
mark()
stack.append(13)
stack = tup()
stack = red(stack)
stack = tup()
stack = red(stack)
stack = tup()
stack = red(stack)
mark()
stack = tup()
stack = red(stack)
# flag[8] == 'w'
get(2)
mark()
get(1)
mark()
get(1)
mark()
get(0)
stack.append('__getitem__')
stack = tup()
stack = red(stack)
mark()
stack.append(8)
stack = tup()
stack = red(stack)
stack.append('__eq__')
stack = tup()
stack = red(stack)
mark()
stack.append('w')
stack = tup()
stack = red(stack)
stack = tup()
stack = red(stack)
mark()
stack = tup()
stack = red(stack)
# flag[7] == 'm'
get(2)
mark()
get(1)
mark()
get(1)
mark()
get(0)
stack.append('__getitem__')
stack = tup()
stack = red(stack)
mark()
stack.append(7)
stack = tup()
stack = red(stack)
stack.append('__eq__')
stack = tup()
stack = red(stack)
mark()
stack.append('m')
stack = tup()
stack = red(stack)
stack = tup()
stack = red(stack)
mark()
stack = tup()
stack = red(stack)
stack.append(print)
mark()
stack.append('Correct!')
stack = tup()
stack = red(stack)

flag = 'AIS3{dAmwjzphIj}'
#       0123456789abcdef

pp()
print(flag)
