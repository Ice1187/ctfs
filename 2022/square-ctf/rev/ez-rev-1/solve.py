from z3 import *

enc = [0x0A, 0x3, 0x0D, 0x1F, 0x1F, 0x18, 0x7, 0x9, 0x27, 0x2, 0x19, 0x1, 0x0F, 0x0C, 0x0D, 0x3, 0x1, 0x33, 0x16, 0x5, 0x1, 0x0A, 0x1F, 0x27, 0x5, 0x1E, 0x0A, 0x33, 0x19, 0x3B, 0x0F, 0x0,
       0x1, 0x15, 0x11, 0x18, 0x0E, 0x18, 0x11, 0x12, 0x9, 0x30, 0x1C, 0x0A, 0x0B, 0x1C, 0x0A, 0x1E, 0x0C, 0x1D, 0x33, 0x5, 0x3, 0x13, 0x1, 0x33, 0x8, 0x9, 0x0C, 0x3B, 0x5, 0x1B, 0x11, 0x0]

key = [BitVec(f'key[{i}]', 8) for i in range(5)]
flag = [BitVec(f'flag[{i}]', 8) for i in range(64)]
for i in range(0, 64, 5):
    for j in range(0, 5):
        if i+j == 64:
            break
        flag[i+j] = enc[i+j] ^ key[j]

s = Solver()
s.add(flag[0] == ord('f'))
s.add(flag[1] == ord('l'))
s.add(flag[2] == ord('a'))
s.add(flag[3] == ord('g'))
s.add(flag[4] == ord('{'))
print(s.check())

print(s.model())
key = [None]*5
key[0] = 108
key[4] = 100
key[1] = 111
key[2] = 108
key[3] = 120

flag = [None]*64
for i in range(0, 64, 5):
    for j in range(0, 5):
        if i+j == 64:
            break
        flag[i+j] = enc[i+j] ^ key[j]

print(''.join(map(chr, flag)))
